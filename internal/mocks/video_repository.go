// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/video_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repositories/video_repository.go -destination=internal/mocks/video_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "mashaghel/internal/repositories/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVideoRepository is a mock of VideoRepository interface.
type MockVideoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVideoRepositoryMockRecorder
	isgomock struct{}
}

// MockVideoRepositoryMockRecorder is the mock recorder for MockVideoRepository.
type MockVideoRepositoryMockRecorder struct {
	mock *MockVideoRepository
}

// NewMockVideoRepository creates a new mock instance.
func NewMockVideoRepository(ctrl *gomock.Controller) *MockVideoRepository {
	mock := &MockVideoRepository{ctrl: ctrl}
	mock.recorder = &MockVideoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoRepository) EXPECT() *MockVideoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVideoRepository) Create(video models.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", video)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVideoRepositoryMockRecorder) Create(video any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVideoRepository)(nil).Create), video)
}

// Delete mocks base method.
func (m *MockVideoRepository) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVideoRepositoryMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVideoRepository)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockVideoRepository) Get(key string) (*models.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*models.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVideoRepositoryMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVideoRepository)(nil).Get), key)
}

// GetByName mocks base method.
func (m *MockVideoRepository) GetByName(name string) (*models.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name)
	ret0, _ := ret[0].(*models.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockVideoRepositoryMockRecorder) GetByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockVideoRepository)(nil).GetByName), name)
}

// Update mocks base method.
func (m *MockVideoRepository) Update(videoUpdate models.Video) (*models.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", videoUpdate)
	ret0, _ := ret[0].(*models.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVideoRepositoryMockRecorder) Update(videoUpdate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVideoRepository)(nil).Update), videoUpdate)
}
